---
title: Saving Daylight Time?
author: Garrick Aden-Buie
date: '2022-03-12'
slug: saving-daylight-time
categories:
  - Blog
tags:
  - Visualization
description: |
  How much daylight do cities across the world get throughout the year?
  Does Daylight Saving Time really save any daylight?
  A visualization to explore these questions.
images: 
  - blog/saving-daylight-time/index_files/figure-html/social-1.png
source_link: 'https://github.com/gadenbuie/garrickadenbuie-com/blob/main/content/blog/2022/saving-daylight-time/index.Rmd'
keywords: rstats
editor_options:
  chunk_output_type: console
---

<!-- Links -->

```{r setup, include=FALSE}
knitr::opts_chunk$set(
  echo = TRUE, warning = FALSE, message = FALSE,
  fig.width = 9, fig.height = 7,
  fig.showtext = TRUE
)
options(htmltools.dir.version = TRUE)
```

## Inspiration

[How long are the nights?](https://plotparade.com/gallery_sunrise.html)

![How long are the nights in New York City? by [Krisztina Szucs](https://krisztinaszucs.com/)](https://plotparade.com/chartimg/SUNRISE/c_NYC.jpg)

## Where are you?

```{r location}
location <- as.list(ipapi::geolocate(NA, .progress = FALSE))
location$lat <- location$lat + runif(1, min = -1)
location$lon <- location$lon + runif(1, min = -1)

location[c("lat", "lon", "timezone")]
```

## Sunrise and Sunset Times

```{r sun_times}
sun_times <- 
  suncalc::getSunlightTimes(
    date = seq(
      as.Date("2022-01-01"),
      as.Date("2023-01-01"),
      by = "day"
    ),
    lat = location$lat,
    lon = location$lon,
    tz = location$timezone,
    keep = c("dawn", "nauticalDawn", "dusk", "nauticalDusk", "sunrise", "sunset")
  )
```

## Tidy Sun Times

```{r tidy-sun-times}
library(tidyverse)

tidy_sun_times <- 
  sun_times %>% 
  select(-lat, -lon) %>%
  pivot_longer(-date, names_to = "event", values_to = "time") %>% 
  mutate(
    tz = strftime(time, "%Z"), 
    time = hms::as_hms(time)
  )
```

## First Looks

```{r plot-first-looks}
ggplot(tidy_sun_times) + 
  aes(x = date, y = time, color = event) +
  geom_line()
```

## Paired Events (Start and End)

```{r tidier-sun-times}
tidier_sun_times <- 
  tidy_sun_times %>%
  mutate(
    period = case_when(
      str_detect(event, "[dD]awn|sunrise") ~ "starts",
      str_detect(event, "[dD]usk|sunset") ~ "ends"
    ),
    label = recode(
      event,
      nauticalDusk = "nauticalDawn",
      sunset = "sunrise",
      dusk = "dawn"
    )
  ) %>% 
  pivot_wider(
    names_from = "period", 
    values_from = "time"
  ) %>% 
  group_by(date, tz, label) %>% 
  summarize(
    events = paste(event, collapse = ","),
    label = first(event),
    starts = starts[!is.na(starts)],
    ends = ends[!is.na(ends)]
  ) %>% 
  ungroup() %>% 
  mutate(label = factor(label, c("nauticalDawn", "dawn", "sunrise")))
```

## Another plot

```{r plot-tidier-sun-times}
ggplot(tidier_sun_times) +
  aes(date, ymin = starts, ymax = ends, fill = label) +
  geom_ribbon()
```

Reverse the time axes and provide our own labels

```{r plot-tidier-sun-times-2}
ggplot(tidier_sun_times) +
  aes(date, ymin = starts, ymax = ends, fill = label) +
  geom_ribbon() +
  scale_y_reverse(
    limits = c(24*60^2, 0),
    breaks = seq(0, 24*60^2, by = 3 * 60^2),
    labels = paste0(seq(0, 24, by = 3), ":00"),
    expand = expansion()
  )
```

## Make it pretty

```{r plot-tidier-sun-times-setup}
sysfonts::font_add_google("Outfit")
```

```{r daylight-hours-atlanta, fig.height = 8, fig.width = 9}
x_breaks <- seq(
  from = as.Date("2022-01-01"),
  to = as.Date("2023-01-01"),
  by = "2 months"
)
y_breaks <- seq(0, 24*60^2, by = 3 * 60^2)
color_text <- "#F2CDB9"
color_bg <- "#39304a"

ggplot(tidier_sun_times) +
  aes(date) +
  geom_text(
    data = cross_df(list(date = x_breaks, time = y_breaks, label = "+")) %>% 
      mutate(across(date, as.Date, origin = "1970-01-01")),
    aes(label = label, y = time),
    color = "#C29F5F"
  ) +
  geom_ribbon(
    aes(ymin = starts, ymax = ends, fill = label, alpha = label),
    show.legend = FALSE
  ) +
  geom_hline(
    yintercept = c(9, 17) * 60^2,
    color = color_bg,
    alpha = 0.5,
    linetype = 2
  ) +
  annotate(
    geom = "text",
    x = min(tidier_sun_times$date),
    y = c(9, 17) * 60^2,
    label = c("9am", "5pm"),
    color = color_bg,
    hjust = -0.25,
    vjust = c(2, -1)
  ) +
  geom_text(
    data = . %>% 
      filter(tz != coalesce(lag(tz), first(tz))) %>% 
      slice_head(n = 1),
    aes(y = ends, label = tz),
    hjust = 1,
    vjust = 1,
    nudge_x = -21,
    nudge_y = -60^2 * 1.5,
    lineheight = 0.8,
    color = color_text
  ) +
  geom_curve(
    data = . %>% 
      filter(label == "nauticalDawn") %>%
      filter(tz != coalesce(lag(tz), first(tz))) %>% 
      slice_head(n = 1), 
    aes(x = date - 17, xend = date, y = ends - (-60^2 * 1.2), yend = ends + 500),
    arrow = arrow(length = unit(0.08, "inch")), 
    size = 0.5,
    color = color_text,
    curvature = 0.4
  ) +
  geom_text(
    data = . %>% 
      filter(tz != coalesce(lag(tz), first(tz))) %>% 
      slice_tail(n = 1),
    aes(y = starts, label = tz),
    hjust = 1,
    nudge_x = -21,
    nudge_y = 60^2 * 1.5,
    lineheight = 0.8,
    color = color_text
  ) +
  geom_curve(
    data = . %>% 
      filter(label == "nauticalDawn") %>%
      filter(tz != coalesce(lag(tz), first(tz))) %>% 
      slice_tail(n = 1),
    aes(x = date - 17, xend = date, y = starts - 60^2, yend = starts - 500),
    arrow = arrow(length = unit(0.08, "inch")), 
    size = 0.5,
    color = color_text,
    curvature = -0.4
  ) +
  ggrepel::geom_label_repel(
    data = . %>% filter(date == max(date)) %>% 
      separate_rows(events, sep = ",") %>% 
      mutate(
        date = date + 12,
        time = if_else(events == label, starts, ends),
        events = snakecase::to_title_case(events)
      ),
    aes(y = time, fill = label, label = events),
    color = color_bg,
    fontface = "bold",
    show.legend = FALSE,
    direction = "y",
    min.segment.length = 20,
    hjust = 0,
    label.size = 0,
    label.padding = 0.33,
    box.padding = 0.25,
    xlim = c(as.Date("2023-01-07"), NA)
  ) +
  scale_fill_manual(
    values = c(
      nauticalDawn = "#b56576",
      dawn = "#eaac8b",
      sunrise = "#ffd27d"
    )
  ) +
  scale_alpha_discrete(range = c(0.5, 0.9)) +
  scale_x_date(
    breaks = x_breaks, 
    date_labels = "%b", 
    limits = c(
      as.Date("2022-01-01"),
      as.Date("2023-03-15")
    ),
    expand = expansion()
  ) +
  scale_y_reverse(
    limits = c(max(tidier_sun_times$ends + 60^2), min(tidier_sun_times$starts - 60^2)),
    breaks = y_breaks,
    labels = paste0(seq(0, 24, by = 3), ":00"),
    expand = expansion()
  ) +
  labs(
    x = NULL,
    y = NULL,
    title = "How long are the days near me?",
    subtitle = "Atlanta, GA",
    caption = "garrickadenbuie.com"
  ) +
  coord_cartesian(clip = "off") +
  theme_minimal(base_family = "Outfit", base_size = 16) +
  theme(
    plot.title = element_text(color = color_text, hjust = 0, size = 14),
    plot.subtitle = element_text(color = color_text, hjust = 0, size = 24, margin = margin(b = 6)),
    plot.title.position = "plot",
    plot.background = element_rect(fill = color_bg),
    plot.margin = margin(20, 0, 20, 10),
    # panel.border = element_rect(color = color_text, fill = NA),
    panel.grid = element_blank(),
    axis.text = element_text(color = color_text),
    axis.title = element_text(color = color_text),
    plot.caption = element_text(color = "#726194", hjust = 0.97, vjust = -1),
    plot.caption.position = "plot"
  )
```

```{r eval=FALSE, echo=FALSE}
tidier_sun_times %>% 
  filter(label == "sunrise") %>%
  mutate(
    starts = lubridate::ymd_hms(paste(date, starts), tz = location$tz),
    ends = lubridate::ymd_hms(paste(date, ends), tz = location$tz),
    morning = lubridate::ymd_hms(paste(date, "9:00:00"), tz = location$tz),
    evening = lubridate::ymd_hms(paste(date, "17:00:00"), tz = location$tz),
    morning = as.numeric(difftime(morning, starts, units = "secs")),
    evening = as.numeric(difftime(ends, evening, units = "secs")),
    non_work_hours = (morning + evening) / 60
  ) %>% 
  ggplot() +
  aes(date, non_work_hours) +
  geom_col() +
  scale_y_continuous(
    labels = function(x) paste0(round(x / 60), "h")
  )
```

## Around the World

```{r include = FALSE}
REBUILD <- FALSE
```

```{r eval=REBUILD, include=FALSE}
source("plot_daylight_hours.R")
if (fs::dir_exists("cities")) {
  fs::dir_delete("cities")
} 

cities <- download_cities()
cities %>% 
  filter(
    city != "City of London", 
    !is.na(country_name),
    country != "RU"
  ) %>%
  mutate(lat_group = ggplot2::cut_number(lat, n = 10)) %>% 
  group_by(lat_group, region) %>%
  slice_max(population, n = 1, with_ties = FALSE) %>%
  group_by(lat_group) %>% 
  slice_max(population, n = 3, with_ties = FALSE) %>% 
  bind_rows(
    cities %>% filter(population > 1e6, country != "RU") %>% slice_max(lat, n = 1),
    cities %>% filter(population > 1e5) %>% slice_min(lat, n = 1)
  ) %>%
  write_csv("cities_largest.csv")
```

```{r echo = FALSE, include = FALSE}
source("plot_daylight_hours.R")
cities_largest <- readr::read_csv("cities_largest.csv")
```

```{r city_plot_data, echo = FALSE}
city_plot_data <- 
  cities_largest %>%
  arrange(desc(lat)) %>%
  mutate(
    country_name = case_when(
      country == "US" ~ "USA",
      country == "GB" ~ "United Kingdom",
      country == "CD" ~ "DRC",
      country == "KR" ~ "Korea",
      country == "RU" ~ "Russia",
      country == "VE" ~ "Venezuela",
      TRUE ~ country_name
    ),
    title = glue::glue("{city}, {country_name}"),
    file = fs::path("cities", snakecase::to_snake_case(title), ext = "png")
  ) %>%
  select(lat, lon, timezone = tz, title, file)
```

```{r echo = FALSE, eval = REBUILD}
plots_cities <-
  city_plot_data %>%
  split(.$file) %>%
  map(select, -file) %>%
  map(pmap, plot_sun_times) %>% 
  flatten()

fs::dir_create("cities")

iwalk(plots_cities, function(g, file) {
  message(file)
  ggsave(
    file,
    plot = g,
    width = 9,
    height = 8,
    dpi = 150
  )
})
```

```{r echo=FALSE}
city_options <- map(transpose(city_plot_data), function(.x) {
  htmltools::tags$option(value = .x$file, `data-city` = .x$title, .x$title)
})

htmltools::withTags(
  div(
    class = "pa",
    label(
      class = "b db mb2",
      `for` = "choose-city",
      "Pick a city"
    ),
    div(
      class = "mb2",
      select(
        id = "choose-city",
        class = "input-reset db di-ns mb2 pa2 bn br1 w-100 mw5 select-dropdown-arrow custom-text-color custom-bg-light",
        city_options
      ),
      button(
        id = "choose-city-prev",
        class = "link dim ph3 pv2 bn br1 custom-text-color custom-bg-light",
        htmltools::HTML(format(shiny::icon("arrow-left"))),
        span(class = "clip", "Previous city")
      ),
      button(
        id = "choose-city-next",
        class = "link dim ph3 pv2 bn br1 custom-text-color custom-bg-light",
        htmltools::HTML(format(shiny::icon("arrow-right"))),
        span(class = "clip", "Next city")
      )
    )
  )
)
```

```{r echo=FALSE}
htmltools::tags$div(
  id = "city-plot",
  `aria-live` = "polite",
  htmltools::img(src = city_plot_data$file[[1]], alt = city_plot_data$title[[1]])
)
```

<!-- html_preserve -->
```{css echo=FALSE}
.city-plots {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  grid-gap: 1em;
}
.custom-bg-light {
  background-color: var(--slate-90);
}
@media (prefers-color-scheme: dark) {
  .custom-bg-light {
    background-color: var(--slate-20);
  }
}
```

```{js echo=FALSE}
function updatePlotSelectedCity() {
  const plot = document.querySelector('#city-plot > img')
  const inputCity = document.getElementById('choose-city')
  plot.src = inputCity.value
  plot.setAttribute('alt', inputCity.dataset.city)
}
document.addEventListener('DOMContentLoaded', updatePlotSelectedCity)
document.getElementById('choose-city').addEventListener('change', updatePlotSelectedCity)
Array.from(
  document.getElementById('choose-city').parentElement.querySelectorAll('button')
).map(btn => btn.addEventListener('click', function(ev) {
    const inputCity = document.getElementById('choose-city')
    const idxCurrent = Array.from(inputCity.options).findIndex(el => inputCity.value == el.value)
    let idxNext = idxCurrent + (ev.currentTarget.id === 'choose-city-prev' ? -1 : 1)
    console.log({idxCurrent, idxNext})
    if (idxNext < 0) {
      idxNext = inputCity.options.length - 1
    } else if (idxNext >= inputCity.options.length) {
      idxNext = 0
    }
    inputCity.value = inputCity.options[idxNext].value
    inputCity.dispatchEvent(new Event('change'))
  })
)
```
<!-- /html_preserve -->


```{r social, ref.label = "daylight-hours-atlanta", fig.width = 7 * 1.81, fig.height = 7}
# repeat atlanta plot sized for social
```
