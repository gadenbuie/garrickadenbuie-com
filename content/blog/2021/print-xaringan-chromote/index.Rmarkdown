---
title: Printing xaringan slides with chromote
author: Garrick Aden-Buie
date: '2021-01-25'
slug: print-xaringan-chromote
categories:
  - Blog
tags:
  - R
  - xaringan
  - xaringanExtra
  - Slides
  - Tips
  - Scripts
description: Create PDF versions of complicated xaringan slides using {chromote} and a little magic.
source_link: 'https://github.com/gadenbuie/garrickadenbuie-com/tree/main/content/blog/2021/print-xaringan-chromote/index.Rmarkdown'
keywords: rstats
editor_options:
  chunk_output_type: console
---

<!-- Links -->
[xaringan]: https://github.com/yihui/xaringan
[xaringanExtra]: https://pkg.garrickadenbuie.com/xaringanExtra
[panelsets]: https://pkg.garrickadenbuie.com/xaringanExtra/#/panelset
[chromote]: https://github.com/rstudio/chromote
[decktape]: https://github.com/astefanutti/decktape
[pdftools]: https://docs.ropensci.org/pdftools
[gist-full]: https://gist.github.com/gadenbuie/f6b8ec0335bdd45ed5a68bead60ef4fa

```{r setup, include=FALSE}
knitr::opts_chunk$set(
  echo = FALSE, warning = FALSE, message = FALSE,
  fig.width = 9, fig.height = 10
)
options(htmltools.dir.version = TRUE)
```

```{r xe}
xaringanExtra::use_clipboard(selector = "pre.r")
```

```{r gist, cache = TRUE}
url <- "https://gist.github.com/gadenbuie/f6b8ec0335bdd45ed5a68bead60ef4fa/raw/xaringan-chromote-print.R"
code <- readLines(url, warn = FALSE)
code <- paste(code, collapse = "\n")
```

```{r asciicast-record, eval=FALSE}
cast <- asciicast::record("asciicast-script.R")
cast2 <- cast
prompts <- which(cast2$output$data == "> ")
last_prompt <- prompts[length(prompts)]
cast2$output <- cast2$output[last_prompt:nrow(cast2$output), ]
cast2$output$time <- cast2$output$time - min(cast2$output$time)
asciicast::write_svg(
  cast2, "asciicast-xaringan2pdf.svg",
  window = FALSE,
  rows = 3,
  cursor = TRUE
  # theme = list(
  #   background = "inherit",
  #   cursor = "var(--text-accent)",
  #   text = "currentcolor",
  #   font_family = "inherit"
  # )
)
```

::: lead

There are a number of options for producing PDF versions of <span class="pkg">[xaringan]</span> slides,
provided you use the standard <span class="pkg">xaringan</span> features.

If you add interactive elements,
like [panelsets] from <span class="pkg">[xaringanExtra]</span>,
printing your slides to convert them to PDF may not capture everything in your slides.

This post demonstrates a function that uses <span class="pkg">[chromote]</span>
to print <span class="pkg">xaringan</span> slides to PDF files that should give better results,
in particular when using [panelsets].

:::

## The Problem

Typically, it's fairly easy to convert <span class="pkg">xaringan</span> slides to PDF.
There are three methods that I've used that each work well
and produce relatively similar results:

1. Print the slides from a browser. Typically this works best in Chrome.

1. Use `xaringan::decktape()` to virtually print the slides to PDF.
  This requires docker or an installed version of the [decktape.js][decktape] utility.

1. Use `pagedown::chrome_print()`. This is similar to the first option,
   but uses a [headless](#headless) version of Chrome to do the printing
   behind the scenes.

These methods all work well but have one significant drawback:
they don't work well with <span class="pkg">xaringanExtra</span>'s [panelsets].
The problem with the panelsets is that they essentially add "within-slide" slides.
All of the panels are contained in a single slide,
so when printed,
only the first panel in the panelset is shown.


## The Idea

The solution is easy but took me a bit of fiddling to figure out:
we use <span class="pkg">chromote</span> to control our own headless version of Chrome.
Then we ask a programmatic monkey to push the <kbd>&rarr;</kbd> button repeatedly,
once per second(-ish),
to advance through the slides,
printing each slide to its own PDF.

Once all the slides are printed,
we ask our monkey assistant to please staple the slides together into one (big) PDF file.
All of this happens inside a headless Chrome browser controlled by <span class="pkg">chromote</span>.

That's it!
And okay, the monkey assistant is actually a little bit of JavaScript that mashes a virtual right arrow key.
And the stapler is actually the fantastic <span class="pkg">[pdftools]</span> package.

Oh, and <a id="headless">_headless_</a> isn't as spooky as it sounds.
Basically it's Chrome without the _chrome_.
In other words,
it's a version of Chrome that runs as a command line utility
and doesn't have a user interface that you can click around in.
Instead, you communicate with the browser by sending it commands,
all of which are made easier by <span class="pkg">chromote</span>.

## The Solution

I've written a function, `xaringan_to_pdf()`,
that you can point either at your slides online or your at local rendered slides (which may require `file://` before the full path to the `.html` file).

You can [copy the code below](#the-code), or you can source it from [this gist][gist-full] using the code and shortlink below[^why-here].
_Please check the source before you run it!_

[^why-here]: I wasn't really sure where to put this function. Maybe I'll eventually add it to [xaringanExtra</span>, but for now it'll live here where hopefully it can still be useful to you!

```r
source("https://git.io/xaringan2pdf")
```

Running `xaringan_to_pdf()` will walk through your slides,
printing them one-by-one,
and returning one big PDF file.
I'm not linking one here because they can be _big_.

<pre id="asciicast"><img src="asciicast-xaringan2pdf.svg"></pre>

## The Code

Before you can print your slides with `xaringan_to_pdf()`, you'll need a few things:

1. [Google Chrome](https://www.google.com/chrome/)

1. The <span class="pkg">chromote</span> package, which isn't on CRAN yet:

   ```{r, echo=TRUE, eval=FALSE}
   remotes::install_github("rstudio/chromote")
   ```

1. A few other packages that you can get from CRAN:

   ```{r, echo=TRUE, eval=FALSE}
   install.packages(c("progress", "jsonlite", "pdftools", "digest"))
   ```

Once you have those things installed and ready to go,
copy the source code below and then run `xaringan_to_pdf()` to print your slides!

If you have any problems with the code,
feel free to [leave a comment on the gist][gist-full].

```{css echo=FALSE}
.gist { display: none; }
#xaringan-chromote-print-r {
  max-height: 80vh;
  overflow-y: auto;
}
#asciicast > img {
  margin-bottom: 0;
}
```

```{=html}
<pre class="r"><code id = "xaringan-chromote-print-r">`r code`</code></pre>

<script
  type="text/javascript"
  src="https://gist.github.com/f6b8ec0335bdd45ed5a68bead60ef4fa.js?file=xaringan-chromote-print.R"
></script>
```

```{js echo=FALSE}
var code = []
document.addEventListener('DOMContentLoaded', function() {
  var gist = document.querySelectorAll('.gist .file .js-file-line')
  if (gist.length) {
    gist.forEach(function(el) {
      code.push(el.textContent)
    })
    var rscript = document.getElementById('xaringan-chromote-print-r')
    rscript.classList = 'r'
    rscript.textContent = code.join('\n').replace(/\n\n/g, '\n')
    hljs.highlightBlock(rscript)
  }
})
```
